var searchIndex = {};
searchIndex["sodiumoxide"] = {"doc":"Rust bindings to the [sodium library](https://github.com/jedisct1/libsodium).","items":[[5,"init","sodiumoxide","`init()` initializes the sodium library and chooses faster versions of\nthe primitives if possible. `init()` also makes the random number generation\nfunctions (`gen_key`, `gen_keypair`, `gen_nonce`, `randombytes`, `randombytes_into`)\nthread-safe",null,{"inputs":[],"output":{"name":"bool"}}],[0,"randombytes","","Cryptographic random number generation.",null,null],[5,"randombytes","sodiumoxide::randombytes","`randombytes()` randomly generates size bytes of data.",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[5,"randombytes_into","","`randombytes_into()` fills a buffer `buf` with random data.",null,null],[0,"utils","sodiumoxide","Libsodium utility functions",null,null],[5,"memzero","sodiumoxide::utils","`memzero()` tries to effectively zero out the data in `x` even if\noptimizations are being applied to the code.",null,null],[5,"memcmp","","`memcmp()` returns true if `x[0]`, `x[1]`, ..., `x[len-1]` are the\nsame as `y[0]`, `y[1]`, ..., `y[len-1]`. Otherwise it returns `false`.",null,null],[5,"increment_le","","`increment_le()` treats `x` as an unsigned little-endian number and increments it.",null,null],[0,"version","sodiumoxide","Libsodium version functions",null,null],[5,"version_string","sodiumoxide::version","`version_string()` returns the version string from libsodium.",null,{"inputs":[],"output":{"name":"str"}}],[5,"version_major","","`version_major()` returns the major version from libsodium.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"version_minor","","`version_minor()` returns the minor version from libsodium.",null,{"inputs":[],"output":{"name":"usize"}}],[0,"crypto","sodiumoxide","Cryptographic functions",null,null],[0,"box_","sodiumoxide::crypto","Public-key authenticated encryption",null,null],[0,"curve25519xsalsa20poly1305","sodiumoxide::crypto::box_","`crypto_box_curve25519xsalsa20poly1305` , a particular\ncombination of Curve25519, Salsa20, and Poly1305 specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html).",null,null],[3,"SecretKey","sodiumoxide::crypto::box_::curve25519xsalsa20poly1305","`SecretKey` for asymmetric authenticated encryption",null,null],[12,"0","","",0,null],[3,"PublicKey","","`PublicKey` for asymmetric authenticated encryption",null,null],[12,"0","","",1,null],[3,"Nonce","","`Nonce` for asymmetric authenticated encryption",null,null],[12,"0","","",2,null],[3,"PrecomputedKey","","Applications that send several messages to the same receiver can gain speed by\nsplitting `seal()` into two steps, `precompute()` and `seal_precomputed()`.\nSimilarly, applications that receive several messages from the same sender can gain\nspeed by splitting `open()` into two steps, `precompute()` and `open_precomputed()`.",null,null],[12,"0","","",3,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public key.",null,null],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"seal","","`seal()` encrypts and authenticates a message `m` using the senders secret key `sk`,\nthe receivers public key `pk` and a nonce `n`. It returns a ciphertext `c`.",null,null],[5,"open","","`open()` verifies and decrypts a ciphertext `c` using the receiver&#39;s secret key `sk`,\nthe senders public key `pk`, and a nonce `n`. It returns a plaintext `Ok(m)`.\nIf the ciphertext fails verification, `open()` returns `Err(())`.",null,null],[5,"precompute","","`precompute()` computes an intermediate key that can be used by `seal_precomputed()`\nand `open_precomputed()`",null,{"inputs":[{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"precomputedkey"}}],[5,"seal_precomputed","","`seal_precomputed()` encrypts and authenticates a message `m` using a precomputed key `k`,\nand a nonce `n`. It returns a ciphertext `c`.",null,null],[5,"open_precomputed","","`open_precomputed()` verifies and decrypts a ciphertext `c` using a precomputed\nkey `k` and a nonce `n`. It returns a plaintext `Ok(m)`.\nIf the ciphertext fails verification, `open_precomputed()` returns `Err(())`.",null,null],[17,"PUBLICKEYBYTES","","Number of bytes in a `PublicKey`.",null,null],[17,"SECRETKEYBYTES","","Number of bytes in a `SecretKey`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[17,"PRECOMPUTEDKEYBYTES","","Number of bytes in a `PrecomputedKey`.",null,null],[17,"MACBYTES","","Number of bytes in the authenticator tag of an encrypted message\ni.e. the number of bytes by which the ciphertext is larger than the\nplaintext.",null,null],[11,"clone","","",0,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"eq","","",0,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"serialize","","",0,{"inputs":[{"name":"secretkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",0,null],[11,"index","","",0,null],[11,"index","","",0,null],[11,"index","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",0,null],[11,"drop","","",0,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"eq","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"serialize","","",1,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"publickey"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",1,null],[11,"clone","","",2,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"serialize","","",2,{"inputs":[{"name":"nonce"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",2,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",2,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",2,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",2,{"inputs":[{"name":"nonce"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"precomputedkey"}],"output":{"name":"precomputedkey"}}],[11,"eq","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"precomputedkey"}],"output":{"name":"bool"}}],[11,"serialize","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",3,null],[11,"index","","",3,null],[11,"index","","",3,null],[11,"index","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",3,null],[11,"drop","","",3,{"inputs":[{"name":"precomputedkey"}],"output":null}],[0,"sealedbox","sodiumoxide::crypto","Sealed Boxes",null,null],[0,"curve25519blake2bxsalsa20poly1305","sodiumoxide::crypto::sealedbox","A particular combination of Curve25519, Blake2B, Salsa20 and Poly1305.",null,null],[5,"seal","sodiumoxide::crypto::sealedbox::curve25519blake2bxsalsa20poly1305","The `seal()` function encrypts a message `m` for a recipient whose public key\nis `pk`. It returns the ciphertext whose length is `SEALBYTES + m.len()`.",null,null],[5,"open","","The `open()` function decrypts the ciphertext `c` using the key pair `(pk, sk)`\nand returns the decrypted message.",null,null],[0,"sign","sodiumoxide::crypto","Public-key signatures",null,null],[0,"ed25519","sodiumoxide::crypto::sign","`ed25519`, a signature scheme specified in\n[Ed25519](http://ed25519.cr.yp.to/). This function is conjectured to meet the\nstandard notion of unforgeability for a public-key signature scheme under\nchosen-message attacks.",null,null],[3,"Seed","sodiumoxide::crypto::sign::ed25519","`Seed` that can be used for keypair generation",null,null],[12,"0","","",4,null],[3,"SecretKey","","`SecretKey` for signatures",null,null],[12,"0","","",5,null],[3,"PublicKey","","`PublicKey` for signatures",null,null],[12,"0","","",6,null],[3,"Signature","","Detached signature",null,null],[12,"0","","",7,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public\nkey.",null,null],[5,"keypair_from_seed","","`keypair_from_seed()` computes a secret key and a corresponding public key\nfrom a `Seed`.",null,null],[5,"sign","","`sign()` signs a message `m` using the signer&#39;s secret key `sk`.\n`sign()` returns the resulting signed message `sm`.",null,null],[5,"verify","","`verify()` verifies the signature in `sm` using the signer&#39;s public key `pk`.\n`verify()` returns the message `Ok(m)`.\nIf the signature fails verification, `verify()` returns `Err(())`.",null,null],[5,"sign_detached","","`sign_detached()` signs a message `m` using the signer&#39;s secret key `sk`.\n`sign_detached()` returns the resulting signature `sig`.",null,null],[5,"verify_detached","","`verify_detached()` verifies the signature in `sig` against the message `m`\nand the signer&#39;s public key `pk`.\n`verify_detached()` returns true if the signature is valid, false otherwise.",null,null],[17,"SEEDBYTES","","Number of bytes in a `Seed`.",null,null],[17,"SECRETKEYBYTES","","Number of bytes in a `SecretKey`.",null,null],[17,"PUBLICKEYBYTES","","Number of bytes in a `PublicKey`.",null,null],[17,"SIGNATUREBYTES","","Number of bytes in a `Signature`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"seed"}],"output":{"name":"seed"}}],[11,"eq","","",4,{"inputs":[{"name":"seed"},{"name":"seed"}],"output":{"name":"bool"}}],[11,"serialize","","",4,{"inputs":[{"name":"seed"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"seed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",4,null],[11,"drop","","",4,{"inputs":[{"name":"seed"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"eq","","",5,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"serialize","","",5,{"inputs":[{"name":"secretkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",5,null],[11,"drop","","",5,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"eq","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"serialize","","",6,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"ordering"}}],[11,"hash","","",6,{"inputs":[{"name":"publickey"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",6,null],[11,"clone","","",7,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"eq","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"serialize","","",7,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"ordering"}}],[11,"hash","","",7,{"inputs":[{"name":"signature"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",7,null],[0,"scalarmult","sodiumoxide::crypto","Scalar multiplication",null,null],[0,"curve25519","sodiumoxide::crypto::scalarmult","`crypto_scalarmult_curve25519` specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Sections 2, 3, and 4.\nThis function is conjectured to be strong. For background see Bernstein,\n&quot;Curve25519: new Diffie-Hellman speed records,&quot; Lecture Notes in Computer\nScience 3958 (2006), 207–228, http://cr.yp.to/papers.html#curve25519.",null,null],[3,"Scalar","sodiumoxide::crypto::scalarmult::curve25519","`Scalar` value (integer in byte representation)",null,null],[12,"0","","",8,null],[3,"GroupElement","","`GroupElement`",null,null],[12,"0","","",9,null],[5,"scalarmult","","`scalarmult()` multiplies a group element `p`\nby an integer `n`. It returns the resulting group element\n`q`.",null,{"inputs":[{"name":"scalar"},{"name":"groupelement"}],"output":{"name":"groupelement"}}],[5,"scalarmult_base","","`scalarmult_base()` computes the scalar product of a standard\ngroup element and an integer `n`. It returns the resulting\ngroup element `q`/",null,{"inputs":[{"name":"scalar"}],"output":{"name":"groupelement"}}],[17,"GROUPELEMENTBYTES","","Number of bytes in a `GroupElement`.",null,null],[17,"SCALARBYTES","","Number of bytes in a `Scalar`.",null,null],[11,"clone","","",8,{"inputs":[{"name":"scalar"}],"output":{"name":"scalar"}}],[11,"eq","","",8,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"bool"}}],[11,"serialize","","",8,{"inputs":[{"name":"scalar"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"scalar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",8,null],[11,"drop","","",8,{"inputs":[{"name":"scalar"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"groupelement"}],"output":{"name":"groupelement"}}],[11,"eq","","",9,{"inputs":[{"name":"groupelement"},{"name":"groupelement"}],"output":{"name":"bool"}}],[11,"serialize","","",9,{"inputs":[{"name":"groupelement"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"groupelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",9,null],[11,"drop","","",9,{"inputs":[{"name":"groupelement"}],"output":null}],[0,"auth","sodiumoxide::crypto","Secret-key authentication",null,null],[0,"hmacsha512","sodiumoxide::crypto::auth","`HMAC-SHA-512` `HMAC-SHA-512` is conjectured to meet the standard notion of\nunforgeability.",null,null],[3,"Key","sodiumoxide::crypto::auth::hmacsha512","Authentication `Key`",null,null],[12,"0","","",10,null],[3,"Tag","","Authentication `Tag`",null,null],[12,"0","","",11,null],[3,"State","","Authentication `State`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"TAGBYTES","","Number of bytes in a `Tag`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",10,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",10,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",10,null],[11,"drop","","",10,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"eq","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"serialize","","",11,{"inputs":[{"name":"tag"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",11,null],[11,"index","","",11,null],[11,"index","","",11,null],[11,"index","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",11,null],[11,"drop","","",12,{"inputs":[{"name":"state"}],"output":null}],[11,"init","","`init()` initializes an authentication structure using a secret key &#39;k&#39;.",12,null],[11,"update","","`update()` can be called more than once in order to compute the authenticator\nfrom sequential chunks of the message.",12,null],[11,"finalize","","`finalize()` finalizes the authenticator computation and returns a `Tag`.",12,{"inputs":[{"name":"state"}],"output":{"name":"tag"}}],[0,"hmacsha512256","sodiumoxide::crypto::auth","`HMAC-SHA-512-256`, i.e., the first 256 bits of\n`HMAC-SHA-512`.  `HMAC-SHA-512-256` is conjectured to meet the standard notion\nof unforgeability.",null,null],[3,"Key","sodiumoxide::crypto::auth::hmacsha512256","Authentication `Key`",null,null],[12,"0","","",13,null],[3,"Tag","","Authentication `Tag`",null,null],[12,"0","","",14,null],[3,"State","","Authentication `State`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"TAGBYTES","","Number of bytes in a `Tag`.",null,null],[11,"clone","","",13,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",13,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",13,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",13,null],[11,"drop","","",13,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"eq","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"serialize","","",14,{"inputs":[{"name":"tag"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",14,null],[11,"index","","",14,null],[11,"index","","",14,null],[11,"index","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",14,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",14,null],[11,"drop","","",15,{"inputs":[{"name":"state"}],"output":null}],[11,"init","","`init()` initializes an authentication structure using a secret key &#39;k&#39;.",15,null],[11,"update","","`update()` can be called more than once in order to compute the authenticator\nfrom sequential chunks of the message.",15,null],[11,"finalize","","`finalize()` finalizes the authenticator computation and returns a `Tag`.",15,{"inputs":[{"name":"state"}],"output":{"name":"tag"}}],[0,"hmacsha256","sodiumoxide::crypto::auth","`HMAC-SHA-256` `HMAC-SHA-256` is conjectured to meet the standard notion of\nunforgeability.",null,null],[3,"Key","sodiumoxide::crypto::auth::hmacsha256","Authentication `Key`",null,null],[12,"0","","",16,null],[3,"Tag","","Authentication `Tag`",null,null],[12,"0","","",17,null],[3,"State","","Authentication `State`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"TAGBYTES","","Number of bytes in a `Tag`.",null,null],[11,"clone","","",16,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",16,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",16,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",16,null],[11,"index","","",16,null],[11,"index","","",16,null],[11,"index","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",16,null],[11,"drop","","",16,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"eq","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"serialize","","",17,{"inputs":[{"name":"tag"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",17,null],[11,"index","","",17,null],[11,"index","","",17,null],[11,"index","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",17,null],[11,"partial_cmp","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",17,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",17,null],[11,"drop","","",18,{"inputs":[{"name":"state"}],"output":null}],[11,"init","","`init()` initializes an authentication structure using a secret key &#39;k&#39;.",18,null],[11,"update","","`update()` can be called more than once in order to compute the authenticator\nfrom sequential chunks of the message.",18,null],[11,"finalize","","`finalize()` finalizes the authenticator computation and returns a `Tag`.",18,{"inputs":[{"name":"state"}],"output":{"name":"tag"}}],[0,"hash","sodiumoxide::crypto","Hashing",null,null],[0,"sha512","sodiumoxide::crypto::hash","`SHA-512`.",null,null],[3,"Digest","sodiumoxide::crypto::hash::sha512","Digest-structure",null,null],[12,"0","","",19,null],[5,"hash","","`hash` hashes a message `m`. It returns a hash `h`.",null,null],[17,"DIGESTBYTES","","Number of bytes in a `Digest`.",null,null],[17,"BLOCKBYTES","","Block size of the hash function.",null,null],[11,"clone","","",19,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"eq","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"serialize","","",19,{"inputs":[{"name":"digest"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",19,null],[11,"index","","",19,null],[11,"index","","",19,null],[11,"index","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,null],[11,"partial_cmp","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",19,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",19,null],[0,"sha256","sodiumoxide::crypto::hash","`SHA-256`.",null,null],[3,"Digest","sodiumoxide::crypto::hash::sha256","Digest-structure",null,null],[12,"0","","",20,null],[5,"hash","","`hash` hashes a message `m`. It returns a hash `h`.",null,null],[17,"DIGESTBYTES","","Number of bytes in a `Digest`.",null,null],[17,"BLOCKBYTES","","Block size of the hash function.",null,null],[11,"clone","","",20,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"eq","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"serialize","","",20,{"inputs":[{"name":"digest"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",20,null],[11,"index","","",20,null],[11,"index","","",20,null],[11,"index","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",20,null],[11,"partial_cmp","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",20,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",20,null],[0,"secretbox","sodiumoxide::crypto","Secret-key authenticated encryption",null,null],[0,"xsalsa20poly1305","sodiumoxide::crypto::secretbox","`crypto_secretbox_xsalsa20poly1305`, a particular\ncombination of Salsa20 and Poly1305 specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html).",null,null],[3,"Key","sodiumoxide::crypto::secretbox::xsalsa20poly1305","`Key` for symmetric authenticated encryption",null,null],[12,"0","","",21,null],[3,"Nonce","","`Nonce` for symmetric authenticated encryption",null,null],[12,"0","","",22,null],[5,"gen_key","","`gen_key()` randomly generates a secret key",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"seal","","`seal()` encrypts and authenticates a message `m` using a secret key `k` and a\nnonce `n`.  It returns a ciphertext `c`.",null,null],[5,"open","","`open()` verifies and decrypts a ciphertext `c` using a secret key `k` and a nonce `n`.\nIt returns a plaintext `Ok(m)`.\nIf the ciphertext fails verification, `open()` returns `Err(())`.",null,null],[17,"KEYBYTES","","Number of bytes in `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[17,"MACBYTES","","Number of bytes in the authenticator tag of an encrypted message\ni.e. the number of bytes by which the ciphertext is larger than the\nplaintext.",null,null],[11,"clone","","",21,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",21,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",21,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",21,null],[11,"index","","",21,null],[11,"index","","",21,null],[11,"index","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",21,null],[11,"drop","","",21,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"serialize","","",22,{"inputs":[{"name":"nonce"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",22,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",22,null],[11,"index","","",22,null],[11,"index","","",22,null],[11,"index","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",22,null],[11,"partial_cmp","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",22,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",22,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",22,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",22,{"inputs":[{"name":"nonce"}],"output":null}],[0,"onetimeauth","sodiumoxide::crypto","Secret-key One-time authentication",null,null],[0,"poly1305","sodiumoxide::crypto::onetimeauth","`crypto_onetimeauth_poly1305`, an authenticator specified\nin [Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 9. This\nauthenticator is proven to meet the standard notion of unforgeability after a\nsingle message.",null,null],[3,"Key","sodiumoxide::crypto::onetimeauth::poly1305","Authentication `Key`",null,null],[12,"0","","",23,null],[3,"Tag","","Authentication `Tag`",null,null],[12,"0","","",24,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"TAGBYTES","","Number of bytes in a `Tag`.",null,null],[11,"clone","","",23,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",23,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",23,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",23,null],[11,"index","","",23,null],[11,"index","","",23,null],[11,"index","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",23,null],[11,"drop","","",23,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"eq","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"serialize","","",24,{"inputs":[{"name":"tag"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",24,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",24,null],[11,"index","","",24,null],[11,"index","","",24,null],[11,"index","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",24,null],[11,"partial_cmp","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",24,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",24,null],[0,"pwhash","sodiumoxide::crypto","Password Hashing",null,null],[0,"scryptsalsa208sha256","sodiumoxide::crypto::pwhash","`crypto_pwhash_scryptsalsa208sha256`, a particular combination of Scrypt, Salsa20/8\nand SHA-256",null,null],[3,"OpsLimit","sodiumoxide::crypto::pwhash::scryptsalsa208sha256","`OpsLimit` represents the maximum number of computations to perform when\nusing the functions in this module.",null,null],[12,"0","","",25,null],[3,"MemLimit","","`MemLimit` represents the maximum amount of RAM that the functions in this\nmodule will use, in bytes.",null,null],[12,"0","","",26,null],[3,"Salt","","`Salt` used for password hashing",null,null],[12,"0","","",27,null],[3,"HashedPassword","","`HashedPassword`is a password verifier generated from a password",null,null],[12,"0","","",28,null],[5,"gen_salt","","`gen_salt()` randombly generates a new `Salt` for key derivation",null,{"inputs":[],"output":{"name":"salt"}}],[5,"derive_key","","The `derive_key()` function derives a key from a password and a `Salt`",null,null],[5,"pwhash","","The `pwhash()` returns a `HashedPassword` which\nincludes:",null,null],[5,"pwhash_verify","","`pwhash_verify()` verifies that the password `str_` is a valid password\nverification string (as generated by `pwhash()`) for `passwd`",null,null],[17,"SALTBYTES","","Number of bytes in a `Salt`.",null,null],[17,"HASHEDPASSWORDBYTES","","Number of bytes in a `HashedPassword`.",null,null],[17,"STRPREFIX","","All `HashedPasswords` start with this string.",null,null],[17,"OPSLIMIT_INTERACTIVE","","Safe base line for `OpsLimit` for interactive password hashing.",null,null],[17,"MEMLIMIT_INTERACTIVE","","Safe base line for `MemLimit` for interactive password hashing.",null,null],[17,"OPSLIMIT_SENSITIVE","","`OpsLimit` for highly sensitive data.",null,null],[17,"MEMLIMIT_SENSITIVE","","`MemLimit` for highly sensitive data.",null,null],[11,"clone","","",25,{"inputs":[{"name":"opslimit"}],"output":{"name":"opslimit"}}],[11,"clone","","",26,{"inputs":[{"name":"memlimit"}],"output":{"name":"memlimit"}}],[11,"clone","","",27,{"inputs":[{"name":"salt"}],"output":{"name":"salt"}}],[11,"eq","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"serialize","","",27,{"inputs":[{"name":"salt"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"salt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,null],[11,"partial_cmp","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"ordering"}}],[11,"hash","","",27,{"inputs":[{"name":"salt"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",27,null],[11,"clone","","",28,{"inputs":[{"name":"hashedpassword"}],"output":{"name":"hashedpassword"}}],[11,"eq","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"serialize","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",28,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",28,null],[11,"partial_cmp","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"ordering"}}],[11,"hash","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",28,null],[0,"stream","sodiumoxide::crypto","Secret-key encryption",null,null],[0,"xsalsa20","sodiumoxide::crypto::stream","`crypto_stream_xsalsa20`, a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.\nThis cipher is conjectured to meet the standard notion of\nunpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::xsalsa20","`Key` for symmetric encryption",null,null],[12,"0","","",29,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",30,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",29,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",29,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",29,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",29,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",29,null],[11,"index","","",29,null],[11,"index","","",29,null],[11,"index","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",29,null],[11,"drop","","",29,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"serialize","","",30,{"inputs":[{"name":"nonce"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",30,null],[11,"index","","",30,null],[11,"index","","",30,null],[11,"index","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,null],[11,"partial_cmp","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",30,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",30,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",30,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",30,{"inputs":[{"name":"nonce"}],"output":null}],[0,"aes128ctr","sodiumoxide::crypto::stream","`AES 128` in `CTR`-mode\nThis cipher is conjectured to meet the standard notion of\nunpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::aes128ctr","`Key` for symmetric encryption",null,null],[12,"0","","",31,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",32,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",31,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",31,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",31,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",31,null],[11,"index","","",31,null],[11,"index","","",31,null],[11,"index","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",31,null],[11,"drop","","",31,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"serialize","","",32,{"inputs":[{"name":"nonce"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",32,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",32,null],[11,"index","","",32,null],[11,"index","","",32,null],[11,"index","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,null],[11,"partial_cmp","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",32,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",32,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",32,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",32,{"inputs":[{"name":"nonce"}],"output":null}],[0,"salsa208","sodiumoxide::crypto::stream","`crypto_stream_salsa208` (Salsa20/8), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa208","`Key` for symmetric encryption",null,null],[12,"0","","",33,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",34,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",33,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",33,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",33,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",33,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",33,null],[11,"index","","",33,null],[11,"index","","",33,null],[11,"index","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",33,null],[11,"drop","","",33,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"serialize","","",34,{"inputs":[{"name":"nonce"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",34,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",34,null],[11,"index","","",34,null],[11,"index","","",34,null],[11,"index","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",34,null],[11,"partial_cmp","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",34,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",34,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",34,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",34,{"inputs":[{"name":"nonce"}],"output":null}],[0,"salsa2012","sodiumoxide::crypto::stream","`crypto_stream_salsa2012` (Salsa20/12), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa2012","`Key` for symmetric encryption",null,null],[12,"0","","",35,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",36,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",35,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",35,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",35,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",35,null],[11,"index","","",35,null],[11,"index","","",35,null],[11,"index","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",35,null],[11,"drop","","",35,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"serialize","","",36,{"inputs":[{"name":"nonce"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",36,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",36,null],[11,"index","","",36,null],[11,"index","","",36,null],[11,"index","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",36,null],[11,"partial_cmp","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",36,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",36,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",36,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",36,{"inputs":[{"name":"nonce"}],"output":null}],[0,"salsa20","sodiumoxide::crypto::stream","`crypto_stream_salsa20` (Salsa20/20), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa20","`Key` for symmetric encryption",null,null],[12,"0","","",37,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",38,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",37,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",37,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",37,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",37,null],[11,"index","","",37,null],[11,"index","","",37,null],[11,"index","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",37,null],[11,"drop","","",37,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"serialize","","",38,{"inputs":[{"name":"nonce"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",38,null],[11,"index","","",38,null],[11,"index","","",38,null],[11,"index","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",38,null],[11,"partial_cmp","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",38,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",38,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",38,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",38,{"inputs":[{"name":"nonce"}],"output":null}],[0,"chacha20","sodiumoxide::crypto::stream","`crypto_stream_chacha20` (Chacha20)",null,null],[3,"Key","sodiumoxide::crypto::stream::chacha20","`Key` for symmetric encryption",null,null],[12,"0","","",39,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",40,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",39,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",39,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",39,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",39,null],[11,"index","","",39,null],[11,"index","","",39,null],[11,"index","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",39,null],[11,"drop","","",39,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",40,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"serialize","","",40,{"inputs":[{"name":"nonce"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",40,null],[11,"index","","",40,null],[11,"index","","",40,null],[11,"index","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",40,null],[11,"partial_cmp","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",40,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",40,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",40,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",40,{"inputs":[{"name":"nonce"}],"output":null}],[0,"shorthash","sodiumoxide::crypto","A lot of applications and programming language implementations have been\nrecently found to be vulnerable to denial-of-service attacks when a hash\nfunction with weak security guarantees, like Murmurhash 3, was used to\nconstruct a hash table.",null,null],[0,"siphash24","sodiumoxide::crypto::shorthash","`SipHash-2-4`",null,null],[3,"Digest","sodiumoxide::crypto::shorthash::siphash24","`Digest` structure",null,null],[12,"0","","",41,null],[3,"Key","","`Key`",null,null],[12,"0","","",42,null],[5,"gen_key","","`gen_key()` randomly generates a key for shorthash",null,{"inputs":[],"output":{"name":"key"}}],[5,"shorthash","","`shorthash` hashes a message `m` under a key `k`. It\nreturns a hash `h`.",null,null],[17,"DIGESTBYTES","","Number of bytes in a `Digest`.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[11,"clone","","",41,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"eq","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"serialize","","",41,{"inputs":[{"name":"digest"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",41,null],[11,"index","","",41,null],[11,"index","","",41,null],[11,"index","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",41,null],[11,"partial_cmp","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",41,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",41,null],[11,"clone","","",42,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",42,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"serialize","","",42,{"inputs":[{"name":"key"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",42,null],[11,"index","","",42,null],[11,"index","","",42,null],[11,"index","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",42,null],[11,"drop","","",42,{"inputs":[{"name":"key"}],"output":null}],[0,"verify","sodiumoxide::crypto","Constant-time comparison of fixed-size vecs",null,null],[5,"verify_16","sodiumoxide::crypto::verify","`verify_16()` returns `true` if `x[0]`, `x[1]`, ..., `x[15]` are the\nsame as `y[0]`, `y[1]`, ..., `y[15]`. Otherwise it returns `false`.",null,null],[5,"verify_32","","`verify_32()` returns true if `x[0]`, `x[1]`, ..., `x[31]` are the\nsame as `y[0]`, `y[1]`, ..., `y[31]`. Otherwise it returns `false`.",null,null],[5,"verify_64","","`verify_64()` returns true if `x[0]`, `x[1]`, ..., `x[63]` are the\nsame as `y[0]`, `y[1]`, ..., `y[63]`. Otherwise it returns `false`.",null,null]],"paths":[[3,"SecretKey"],[3,"PublicKey"],[3,"Nonce"],[3,"PrecomputedKey"],[3,"Seed"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"Scalar"],[3,"GroupElement"],[3,"Key"],[3,"Tag"],[3,"State"],[3,"Key"],[3,"Tag"],[3,"State"],[3,"Key"],[3,"Tag"],[3,"State"],[3,"Digest"],[3,"Digest"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Tag"],[3,"OpsLimit"],[3,"MemLimit"],[3,"Salt"],[3,"HashedPassword"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Digest"],[3,"Key"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[11,"fmt","core::ops","",0,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"eq","","",0,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"contains","","# Examples",1,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",1,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"next_back","","",1,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",1,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",1,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",2,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"eq","","",2,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"next","","",2,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",2,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",3,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"eq","","",3,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"contains","","# Examples",4,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",4,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",4,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"next_back","","",4,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",4,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",5,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",5,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"hash_slice","serde::core::hash","Feeds a slice of this type into the state provided.",6,null],[11,"write_u8","","Write a single `u8` into this hasher",7,null],[11,"write_u16","","Write a single `u16` into this hasher.",7,null],[11,"write_u32","","Write a single `u32` into this hasher.",7,null],[11,"write_u64","","Write a single `u64` into this hasher.",7,null],[11,"write_usize","","Write a single `usize` into this hasher.",7,null],[11,"write_i8","","Write a single `i8` into this hasher.",7,null],[11,"write_i16","","Write a single `i16` into this hasher.",7,null],[11,"write_i32","","Write a single `i32` into this hasher.",7,null],[11,"write_i64","","Write a single `i64` into this hasher.",7,null],[11,"write_isize","","Write a single `isize` into this hasher.",7,null],[11,"default","core::hash","",8,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","","",8,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"build_hasher","","",8,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"fmt","","",8,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","core::hash::sip","",9,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",9,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"write","","",9,null],[11,"finish","","",9,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",9,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",9,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"fmt","","",9,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the map output.",10,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",10,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",10,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",11,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"entry","core::fmt::builders","Adds a new entry to the list output.",12,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",12,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",12,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",13,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",13,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",13,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"write_char","serde::core::fmt","Writes a `char` into this writer, returning whether the write succeeded.",14,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",14,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated tuple struct output.",15,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",15,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",16,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",16,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",17,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",17,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",17,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",17,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",17,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",17,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",17,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",17,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",17,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",17,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",17,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"fmt","","",18,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",18,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ne","serde::core::cmp","This method tests for `!=`.",19,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"partial_cmp","core::cmp","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",20,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",20,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",20,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lt","serde::core::cmp","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",21,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",21,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",21,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",21,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"default","core::marker","",22,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","","",22,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"eq","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","rustc_unicode::char","",23,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",25,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"eq","","",26,{"inputs":[{"name":"decodeutf16error"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"decodeutf16error"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"decodeutf16error"}],"output":{"name":"decodeutf16error"}}],[11,"fmt","","",26,{"inputs":[{"name":"decodeutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"decodeutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",26,{"inputs":[{"name":"decodeutf16error"}],"output":{"name":"u16"}}],[11,"next","core::char","",27,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",27,null],[11,"fmt","","",27,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",28,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"clone","","",28,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",28,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"count","","",29,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",29,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",29,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",29,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",30,null],[11,"fmt","","",30,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","collections::str","",31,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"len","core::str","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"next_back","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"count","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",32,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",32,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",33,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"fmt","","",33,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",34,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next","","",34,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",35,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"next_back","","",35,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"next","","",35,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",35,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"fmt","","",35,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",36,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"eq","","",36,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",36,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",37,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next","","",37,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",37,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",38,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"fmt","","",38,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_contained_in","serde::core::str::pattern","Checks whether the pattern matches anywhere in the haystack",39,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",39,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",39,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","core::str::pattern","",40,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"next_match","serde::core::str::pattern","Find the next `Match` result. See `next()`",41,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",41,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",42,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",42,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_back","core::str::pattern","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"fmt","","",43,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"haystack","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"fmt","","",45,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"clone","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"next_back","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",45,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"clone","","",46,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",46,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::str","",47,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","","",47,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",48,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next","","",48,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",48,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",49,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"fmt","","",49,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",50,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",50,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",50,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","rustc_unicode::u_str","",51,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next","","",51,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"fmt","core::str","",52,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",52,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"next_back","","",53,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",53,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",53,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"next","","",54,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",55,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",55,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"fmt","","",55,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",56,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",56,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",56,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",57,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next","","",57,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",58,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"next_back","","",58,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",58,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"fmt","","",58,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::num","",59,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",59,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"eq","","",60,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",61,null],[11,"bitand","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",61,null],[11,"bitor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",61,null],[11,"bitxor","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",61,null],[11,"rem","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",61,null],[11,"div","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",61,null],[11,"mul","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",61,null],[11,"sub","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",61,null],[11,"add","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",61,null],[11,"shr","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",61,null],[11,"shl","","",61,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"eq","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",61,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",61,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","core::slice","",62,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",62,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",63,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"count","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",63,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",63,null],[11,"next","","",64,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",65,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"count","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",66,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"fmt","","",66,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"count","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",67,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",67,null],[11,"fmt","","",67,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"count","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",68,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"fmt","","",68,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",68,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",69,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"count","","",69,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",69,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",69,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",71,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",72,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size_hint","serde::core::iter","Returns the bounds on the remaining length of the iterator.",73,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",73,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",73,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",73,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",73,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",73,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",73,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",73,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",73,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",73,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",73,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",73,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",73,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",73,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",73,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"len","","Returns the exact number of times the iterator will iterate.",74,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"next_back","core::iter","",75,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"fmt","","",75,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",76,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"clone","","",76,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"fmt","","",76,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",77,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"fmt","","",77,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",78,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"fmt","","",78,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",79,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"fmt","","",79,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",80,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next_back","","",81,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next_back","","",82,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"next","","",82,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next_back","","",83,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"next","","# Overflow Behavior",83,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"nth","","",83,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",83,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"clone","","",83,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"fmt","","",83,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",84,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",84,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"next","","",84,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",84,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",84,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",84,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"clone","","",84,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"fmt","","",84,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",85,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",86,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next_back","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",87,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"clone","","",87,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"fmt","","",87,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",88,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",88,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"clone","","",88,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"fmt","","",88,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",89,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next_back","","",90,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"next","","",90,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next_back","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",91,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",91,null],[11,"clone","","",91,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"fmt","","",91,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",92,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"clone","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"fmt","","",93,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"fmt","","",94,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"len","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"next_back","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",96,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"next_back","","",96,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",96,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"fmt","","",96,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"default","","",97,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"new","","Construct a new, empty `ByteBuf`.",97,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",97,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"from","","",97,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_ref","","",97,null],[11,"as_mut","","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_mut","","",97,null],[11,"deref","","",97,null],[11,"deref_mut","","",97,null],[11,"serialize","","",97,{"inputs":[{"name":"bytebuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",98,{"inputs":[{"name":"bytebufvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",98,{"inputs":[{"name":"bytebufvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",98,null],[11,"visit_byte_buf","","",98,{"inputs":[{"name":"bytebufvisitor"},{"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","","",97,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"hash","","",99,null],[11,"clone","","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",99,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",99,null],[11,"from","","",99,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",99,null],[11,"deref","","",99,null],[11,"serialize","","",99,{"inputs":[{"name":"bytes"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",100,null],[13,"Usize","","Represents a `usize` type.",100,null],[13,"U8","","Represents a `u8` type.",100,null],[13,"U16","","Represents a `u16` type.",100,null],[13,"U32","","Represents a `u32` type.",100,null],[13,"U64","","Represents a `u64` type.",100,null],[13,"Isize","","Represents a `isize` type.",100,null],[13,"I8","","Represents a `i8` type.",100,null],[13,"I16","","Represents a `i16` type.",100,null],[13,"I32","","Represents a `i32` type.",100,null],[13,"I64","","Represents a `i64` type.",100,null],[13,"F32","","Represents a `f32` type.",100,null],[13,"F64","","Represents a `f64` type.",100,null],[13,"Char","","Represents a `char` type.",100,null],[13,"Str","","Represents a `&amp;str` type.",100,null],[13,"String","","Represents a `String` type.",100,null],[13,"Unit","","Represents a `()` type.",100,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",100,null],[13,"Seq","","Represents a sequence type.",100,null],[13,"Map","","Represents a map type.",100,null],[13,"UnitStruct","","Represents a unit struct type.",100,null],[13,"NewtypeStruct","","Represents a newtype type.",100,null],[13,"TupleStruct","","Represents a tuple struct type.",100,null],[13,"Struct","","Represents a struct type.",100,null],[13,"FieldName","","Represents a struct field name.",100,null],[13,"Tuple","","Represents a tuple type.",100,null],[13,"Enum","","Represents an `enum` type.",100,null],[13,"VariantName","","Represents an enum variant name.",100,null],[13,"StructVariant","","Represents a struct variant.",100,null],[13,"TupleVariant","","Represents a tuple variant.",100,null],[13,"UnitVariant","","Represents a unit variant.",100,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",100,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",101,{"inputs":[{"name":"unitvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",101,{"inputs":[{"name":"unitvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",102,{"inputs":[{"name":"boolvisitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",102,{"inputs":[{"name":"boolvisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","collections::string","",103,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",104,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",105,{"inputs":[{"name":"phantomdatavisitor"}],"output":{"name":"result"}}],[11,"deserialize","core::marker","",22,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",106,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",106,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",106,{"inputs":[{"name":"binaryheapvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::binary_heap","",107,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",108,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",108,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",108,{"inputs":[{"name":"btreesetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::set","",109,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",110,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",110,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",110,{"inputs":[{"name":"linkedlistvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::linked_list","",111,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",112,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",112,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",112,{"inputs":[{"name":"hashsetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::set","",113,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",114,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",114,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",114,{"inputs":[{"name":"vecvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec","",115,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",116,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",116,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",116,{"inputs":[{"name":"vecdequevisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec_deque","",117,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",118,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",118,{"inputs":[{"name":"tuplevisitor1"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",119,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",119,{"inputs":[{"name":"tuplevisitor2"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",120,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",120,{"inputs":[{"name":"tuplevisitor3"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",121,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",121,{"inputs":[{"name":"tuplevisitor4"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",122,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",122,{"inputs":[{"name":"tuplevisitor5"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",123,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",123,{"inputs":[{"name":"tuplevisitor6"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",124,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",124,{"inputs":[{"name":"tuplevisitor7"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",125,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",125,{"inputs":[{"name":"tuplevisitor8"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",126,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",126,{"inputs":[{"name":"tuplevisitor9"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",127,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",127,{"inputs":[{"name":"tuplevisitor10"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",128,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",128,{"inputs":[{"name":"tuplevisitor11"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",129,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",129,{"inputs":[{"name":"tuplevisitor12"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",130,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",130,{"inputs":[{"name":"tuplevisitor13"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",131,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",131,{"inputs":[{"name":"tuplevisitor14"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",132,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",132,{"inputs":[{"name":"tuplevisitor15"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",133,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",133,{"inputs":[{"name":"tuplevisitor16"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",134,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",134,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",134,{"inputs":[{"name":"btreemapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::map","",135,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",136,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",136,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",136,{"inputs":[{"name":"hashmapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::map","",137,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",138,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",139,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",140,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",141,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",142,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",143,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",144,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",144,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",145,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",146,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",147,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",148,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",149,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",150,null],[13,"InvalidType","","The value had an incorrect type.",150,null],[13,"InvalidLength","","The value had an invalid length.",150,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",150,null],[13,"EndOfStream","","EOF while deserializing a value.",150,null],[13,"UnknownVariant","","Unknown variant in enum.",150,null],[13,"UnknownField","","Unknown field in struct.",150,null],[13,"MissingField","","Struct is missing a field.",150,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",151,null],[10,"into_deserializer","","Convert this value into a deserializer.",151,{"inputs":[{"name":"valuedeserializer"}],"output":{"name":"deserializer"}}],[11,"eq","","",150,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",150,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",150,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",150,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",150,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",150,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",150,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",150,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",150,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",150,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",150,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"deserialize","","",152,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",152,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",153,{"inputs":[{"name":"booldeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",154,{"inputs":[{"name":"i8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",155,{"inputs":[{"name":"i16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",156,{"inputs":[{"name":"i32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",157,{"inputs":[{"name":"i64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",158,{"inputs":[{"name":"isizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",159,{"inputs":[{"name":"u8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",160,{"inputs":[{"name":"u16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",161,{"inputs":[{"name":"u32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",162,{"inputs":[{"name":"u64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",163,{"inputs":[{"name":"usizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",164,{"inputs":[{"name":"f32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",165,{"inputs":[{"name":"f64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",166,{"inputs":[{"name":"chardeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",167,{"inputs":[{"name":"strdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",167,null],[11,"visit_variant","","",167,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",167,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"into_deserializer","collections::string","",103,{"inputs":[{"name":"string"}],"output":{"name":"stringdeserializer"}}],[11,"deserialize","serde::de::value","",168,{"inputs":[{"name":"stringdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",168,null],[11,"visit_variant","","",168,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",168,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",169,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",169,{"inputs":[{"name":"seqdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",169,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"end","","",169,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",169,null],[11,"into_deserializer","collections::vec","",115,{"inputs":[{"name":"vec"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","collections::btree::set","",109,{"inputs":[{"name":"btreeset"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","std::collections::hash::set","",113,{"inputs":[{"name":"hashset"}],"output":{"name":"deserializer"}}],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",170,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",170,{"inputs":[{"name":"seqvisitordeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",171,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",171,{"inputs":[{"name":"mapdeserializer"},{"name":"v_"}],"output":{"name":"result"}}],[11,"visit_key","","",171,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"visit_value","","",171,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"end","","",171,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",171,null],[11,"into_deserializer","collections::btree::map","",135,{"inputs":[{"name":"btreemap"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","std::collections::hash::map","",137,{"inputs":[{"name":"hashmap"}],"output":{"name":"deserializer"}}],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",172,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",172,{"inputs":[{"name":"mapvisitordeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",173,{"inputs":[{"name":"bytesdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",97,{"inputs":[{"name":"bytebuf"}],"output":{"name":"deserializer"}}],[11,"deserialize","serde::de::value","",174,{"inputs":[{"name":"bytebufdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",175,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",175,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",175,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",175,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",175,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",175,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",175,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",175,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",175,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",176,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",177,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_fixed_size_array","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",177,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",177,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.",177,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",177,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",177,null],[11,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",177,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",177,null],[11,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",177,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",178,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",178,{"inputs":[{"name":"visitor"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",178,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",178,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",178,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",178,{"inputs":[{"name":"visitor"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",179,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",179,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",179,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",179,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",180,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",180,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",180,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",180,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",180,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",180,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",180,{"inputs":[{"name":"mapvisitor"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",181,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",181,{"inputs":[{"name":"enumvisitor"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",182,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",182,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",182,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",182,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",182,{"inputs":[{"name":"variantvisitor"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",182,null],[11,"fmt","","",100,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",183,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",183,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",183,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",183,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",183,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",183,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",183,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[11,"next","","",183,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"TupleVisitor13","","A tuple visitor.",null,null],[3,"TupleVisitor14","","A tuple visitor.",null,null],[3,"TupleVisitor15","","A tuple visitor.",null,null],[3,"TupleVisitor16","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",103,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::option","",104,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit","","",104,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",104,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"serialize","core::marker","",22,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor&lt;Iter&gt;`.",184,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",184,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",184,{"inputs":[{"name":"seqiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::binary_heap","",107,{"inputs":[{"name":"binaryheap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::btree::set","",109,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::set","",113,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::linked_list","",111,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec","",115,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec_deque","",117,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",185,null],[11,"visit","","",185,{"inputs":[{"name":"tuplevisitor1"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",185,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",186,null],[11,"visit","","",186,{"inputs":[{"name":"tuplevisitor2"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",186,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",187,null],[11,"visit","","",187,{"inputs":[{"name":"tuplevisitor3"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",187,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",188,null],[11,"visit","","",188,{"inputs":[{"name":"tuplevisitor4"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",188,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",189,null],[11,"visit","","",189,{"inputs":[{"name":"tuplevisitor5"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",189,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",190,null],[11,"visit","","",190,{"inputs":[{"name":"tuplevisitor6"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",190,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",191,null],[11,"visit","","",191,{"inputs":[{"name":"tuplevisitor7"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",191,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",192,null],[11,"visit","","",192,{"inputs":[{"name":"tuplevisitor8"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",192,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",193,null],[11,"visit","","",193,{"inputs":[{"name":"tuplevisitor9"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",193,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",194,null],[11,"visit","","",194,{"inputs":[{"name":"tuplevisitor10"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",194,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",195,null],[11,"visit","","",195,{"inputs":[{"name":"tuplevisitor11"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",195,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",196,null],[11,"visit","","",196,{"inputs":[{"name":"tuplevisitor12"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",196,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",197,null],[11,"visit","","",197,{"inputs":[{"name":"tuplevisitor13"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",197,{"inputs":[{"name":"tuplevisitor13"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",198,null],[11,"visit","","",198,{"inputs":[{"name":"tuplevisitor14"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",198,{"inputs":[{"name":"tuplevisitor14"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",199,null],[11,"visit","","",199,{"inputs":[{"name":"tuplevisitor15"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",199,{"inputs":[{"name":"tuplevisitor15"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",200,null],[11,"visit","","",200,{"inputs":[{"name":"tuplevisitor16"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",200,{"inputs":[{"name":"tuplevisitor16"}],"output":{"name":"option"}}],[11,"new","","Construct a new `MapIteratorVisitor&lt;Iter&gt;`.",201,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",201,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",201,{"inputs":[{"name":"mapiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::btree::map","",135,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::map","",137,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::boxed","",144,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::rc","",146,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::arc","",145,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::borrow","",147,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::result","",148,{"inputs":[{"name":"result"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::net::ip","",138,{"inputs":[{"name":"ipv4addr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",139,{"inputs":[{"name":"ipv6addr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::net::addr","",140,{"inputs":[{"name":"socketaddr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",141,{"inputs":[{"name":"socketaddrv4"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",142,{"inputs":[{"name":"socketaddrv6"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::path","",202,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",143,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",203,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",203,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",204,{"inputs":[{"name":"serialize"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",205,null],[10,"serialize_bool","","Serializes a `bool` value.",205,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","Serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",205,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","Serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",205,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","Serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",205,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","Serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",205,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serializes a `i64` value.",205,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","Serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `serialize_u64` method.",205,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","Serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",205,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",205,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",205,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","`Serializes a `u64` value.",205,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","Serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `serialize_f64` method.",205,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serializes a `f64` value.",205,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","Serializes a character. By default it serializes it as a `&amp;str` containing a\nsingle character.",205,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serializes a `&amp;str`.",205,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","Enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",205,null],[10,"serialize_unit","","Serializes a `()` value.",205,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","Serializes a unit struct value.",205,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_none","","Serializes a `None` value..serialize",205,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[10,"serialize_some","","Serializes a `Some(...)` value.",205,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq","","Serializes a sequence.",205,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq_elt","","Serializes a sequence element.",205,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple","","Serializes a tuple.",205,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_elt","","Serializes a tuple element.",205,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_fixed_size_array","","Serializes a fixed-size array.",205,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","Serializes a tuple struct.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct_elt","","Serializes a tuple struct element.",205,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","Serializes a tuple variant.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant_elt","","Serializes a tuple element.",205,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_map","","Serializes a map.",205,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_map_elt","","Serializes a map element (key-value pair).",205,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct","","Serializes a struct.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_elt","","Serializes an element of a struct.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","Serializes a struct variant.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant_elt","","Serializes an element of a struct variant.",205,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",206,{"inputs":[{"name":"seqvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the sequence if known.",206,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"option"}}],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",207,{"inputs":[{"name":"mapvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the map if known.",207,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"option"}}]],"paths":[[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Hash"],[8,"Hasher"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"DebugMap"],[3,"Arguments"],[3,"DebugList"],[3,"DebugSet"],[8,"Write"],[3,"DebugTuple"],[3,"DebugStruct"],[3,"Formatter"],[3,"Error"],[8,"PartialEq"],[4,"Ordering"],[8,"PartialOrd"],[3,"PhantomData"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"EncodeUtf8"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf16"],[3,"EncodeUtf16"],[3,"Bytes"],[3,"Lines"],[3,"RMatchIndices"],[3,"Chars"],[3,"Utf8Error"],[3,"RSplitTerminator"],[3,"LinesAny"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"CharRange"],[3,"RMatches"],[3,"SplitN"],[3,"Matches"],[3,"SplitWhitespace"],[3,"ParseBoolError"],[3,"Split"],[3,"RSplitN"],[3,"MatchIndices"],[3,"SplitTerminator"],[3,"RSplit"],[3,"CharIndices"],[4,"FpCategory"],[3,"ParseIntError"],[3,"Wrapping"],[3,"Split"],[3,"IterMut"],[3,"RSplitN"],[3,"SplitNMut"],[3,"Windows"],[3,"Iter"],[3,"Chunks"],[3,"ChunksMut"],[3,"SplitN"],[3,"RSplitNMut"],[3,"SplitMut"],[8,"Iterator"],[8,"ExactSizeIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"String"],[4,"Option"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BinaryHeap"],[3,"BTreeSetVisitor"],[3,"BTreeSet"],[3,"LinkedListVisitor"],[3,"LinkedList"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"Vec"],[3,"VecDequeVisitor"],[3,"VecDeque"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"BTreeMap"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Cow"],[4,"Result"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["libsodium_sys"] = {"doc":"","items":[[3,"crypto_auth_hmacsha256_state","libsodium_sys","",null,null],[3,"crypto_auth_hmacsha512_state","","",null,null],[3,"crypto_hash_sha256_state","","",null,null],[3,"crypto_hash_sha512_state","","",null,null],[4,"crypto_generichash_state","","",null,null],[4,"crypto_generichash_blake2b_state","","",null,null],[5,"sodium_init","","",null,null],[5,"crypto_aead_chacha20poly1305_keybytes","","",null,null],[5,"crypto_aead_chacha20poly1305_nsecbytes","","",null,null],[5,"crypto_aead_chacha20poly1305_npubbytes","","",null,null],[5,"crypto_aead_chacha20poly1305_abytes","","",null,null],[5,"crypto_aead_chacha20poly1305_encrypt","","",null,null],[5,"crypto_aead_chacha20poly1305_decrypt","","",null,null],[5,"crypto_auth_bytes","","",null,null],[5,"crypto_auth_keybytes","","",null,null],[5,"crypto_auth_primitive","","",null,null],[5,"crypto_auth","","",null,null],[5,"crypto_auth_verify","","",null,null],[5,"crypto_auth_hmacsha256_bytes","","",null,null],[5,"crypto_auth_hmacsha256_keybytes","","",null,null],[5,"crypto_auth_hmacsha256","","",null,null],[5,"crypto_auth_hmacsha256_verify","","",null,null],[5,"crypto_auth_hmacsha256_init","","",null,null],[5,"crypto_auth_hmacsha256_update","","",null,null],[5,"crypto_auth_hmacsha256_final","","",null,null],[5,"crypto_auth_hmacsha512_bytes","","",null,null],[5,"crypto_auth_hmacsha512_keybytes","","",null,null],[5,"crypto_auth_hmacsha512","","",null,null],[5,"crypto_auth_hmacsha512_verify","","",null,null],[5,"crypto_auth_hmacsha512_init","","",null,null],[5,"crypto_auth_hmacsha512_update","","",null,null],[5,"crypto_auth_hmacsha512_final","","",null,null],[5,"crypto_auth_hmacsha512256_bytes","","",null,null],[5,"crypto_auth_hmacsha512256_keybytes","","",null,null],[5,"crypto_auth_hmacsha512256","","",null,null],[5,"crypto_auth_hmacsha512256_verify","","",null,null],[5,"crypto_auth_hmacsha512256_init","","",null,null],[5,"crypto_auth_hmacsha512256_update","","",null,null],[5,"crypto_auth_hmacsha512256_final","","",null,null],[5,"crypto_box_seedbytes","","",null,null],[5,"crypto_box_publickeybytes","","",null,null],[5,"crypto_box_secretkeybytes","","",null,null],[5,"crypto_box_beforenmbytes","","",null,null],[5,"crypto_box_noncebytes","","",null,null],[5,"crypto_box_zerobytes","","",null,null],[5,"crypto_box_boxzerobytes","","",null,null],[5,"crypto_box_macbytes","","",null,null],[5,"crypto_box_primitive","","",null,null],[5,"crypto_box_sealbytes","","",null,null],[5,"crypto_box_seed_keypair","","",null,null],[5,"crypto_box_keypair","","",null,null],[5,"crypto_box_beforenm","","",null,null],[5,"crypto_box_afternm","","",null,null],[5,"crypto_box_open_afternm","","",null,null],[5,"crypto_box","","",null,null],[5,"crypto_box_open","","",null,null],[5,"crypto_box_easy","","",null,null],[5,"crypto_box_open_easy","","",null,null],[5,"crypto_box_detached","","",null,null],[5,"crypto_box_open_detached","","",null,null],[5,"crypto_box_seal","","",null,null],[5,"crypto_box_seal_open","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_keypair","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_open","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_beforenm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_afternm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_open_afternm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_seedbytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_publickeybytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_secretkeybytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_beforenmbytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_noncebytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_zerobytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_boxzerobytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_macbytes","","",null,null],[5,"crypto_core_hsalsa20_outputbytes","","",null,null],[5,"crypto_core_hsalsa20_inputbytes","","",null,null],[5,"crypto_core_hsalsa20_keybytes","","",null,null],[5,"crypto_core_hsalsa20_constbytes","","",null,null],[5,"crypto_core_hsalsa20","","",null,null],[5,"crypto_core_salsa20_outputbytes","","",null,null],[5,"crypto_core_salsa20_inputbytes","","",null,null],[5,"crypto_core_salsa20_keybytes","","",null,null],[5,"crypto_core_salsa20_constbytes","","",null,null],[5,"crypto_core_salsa20","","",null,null],[5,"crypto_core_salsa2012_outputbytes","","",null,null],[5,"crypto_core_salsa2012_inputbytes","","",null,null],[5,"crypto_core_salsa2012_keybytes","","",null,null],[5,"crypto_core_salsa2012_constbytes","","",null,null],[5,"crypto_core_salsa2012","","",null,null],[5,"crypto_core_salsa208_outputbytes","","",null,null],[5,"crypto_core_salsa208_inputbytes","","",null,null],[5,"crypto_core_salsa208_keybytes","","",null,null],[5,"crypto_core_salsa208_constbytes","","",null,null],[5,"crypto_core_salsa208","","",null,null],[5,"crypto_generichash_bytes_min","","",null,null],[5,"crypto_generichash_bytes_max","","",null,null],[5,"crypto_generichash_bytes","","",null,null],[5,"crypto_generichash_keybytes_min","","",null,null],[5,"crypto_generichash_keybytes_max","","",null,null],[5,"crypto_generichash_keybytes","","",null,null],[5,"crypto_generichash_primitive","","",null,null],[5,"crypto_generichash","","",null,null],[5,"crypto_generichash_init","","",null,null],[5,"crypto_generichash_update","","",null,null],[5,"crypto_generichash_final","","",null,null],[5,"crypto_generichash_statebytes","","",null,null],[5,"crypto_generichash_blake2b_bytes_min","","",null,null],[5,"crypto_generichash_blake2b_bytes_max","","",null,null],[5,"crypto_generichash_blake2b_bytes","","",null,null],[5,"crypto_generichash_blake2b_keybytes_min","","",null,null],[5,"crypto_generichash_blake2b_keybytes_max","","",null,null],[5,"crypto_generichash_blake2b_keybytes","","",null,null],[5,"crypto_generichash_blake2b_saltbytes","","",null,null],[5,"crypto_generichash_blake2b_personalbytes","","",null,null],[5,"crypto_generichash_blake2b","","",null,null],[5,"crypto_generichash_blake2b_salt_personal","","",null,null],[5,"crypto_generichash_blake2b_init","","",null,null],[5,"crypto_generichash_blake2b_init_salt_personal","","",null,null],[5,"crypto_generichash_blake2b_update","","",null,null],[5,"crypto_generichash_blake2b_final","","",null,null],[5,"crypto_hash_bytes","","",null,null],[5,"crypto_hash","","",null,null],[5,"crypto_hash_primitive","","",null,null],[5,"crypto_hash_sha256_bytes","","",null,null],[5,"crypto_hash_sha256","","",null,null],[5,"crypto_hash_sha256_init","","",null,null],[5,"crypto_hash_sha256_update","","",null,null],[5,"crypto_hash_sha256_final","","",null,null],[5,"crypto_hash_sha512_bytes","","",null,null],[5,"crypto_hash_sha512","","",null,null],[5,"crypto_hash_sha512_init","","",null,null],[5,"crypto_hash_sha512_update","","",null,null],[5,"crypto_hash_sha512_final","","",null,null],[5,"crypto_onetimeauth_bytes","","",null,null],[5,"crypto_onetimeauth_keybytes","","",null,null],[5,"crypto_onetimeauth_primitive","","",null,null],[5,"crypto_onetimeauth_poly1305","","",null,null],[5,"crypto_onetimeauth_poly1305_verify","","",null,null],[5,"crypto_onetimeauth_poly1305_bytes","","",null,null],[5,"crypto_onetimeauth_poly1305_keybytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_saltbytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_strbytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_strprefix","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_opslimit_interactive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_memlimit_interactive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_str","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_str_verify","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_ll","","",null,null],[5,"crypto_scalarmult_bytes","","",null,null],[5,"crypto_scalarmult_scalarbytes","","",null,null],[5,"crypto_scalarmult_primitive","","",null,null],[5,"crypto_scalarmult_base","","",null,null],[5,"crypto_scalarmult","","",null,null],[5,"crypto_scalarmult_curve25519_bytes","","",null,null],[5,"crypto_scalarmult_curve25519_scalarbytes","","",null,null],[5,"crypto_scalarmult_curve25519_base","","",null,null],[5,"crypto_scalarmult_curve25519","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_open","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_keybytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_noncebytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_zerobytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_boxzerobytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_macbytes","","",null,null],[5,"crypto_shorthash_siphash24","","",null,null],[5,"crypto_shorthash_siphash24_bytes","","",null,null],[5,"crypto_shorthash_siphash24_keybytes","","",null,null],[5,"crypto_sign_ed25519_keypair","","",null,null],[5,"crypto_sign_ed25519_seed_keypair","","",null,null],[5,"crypto_sign_ed25519","","",null,null],[5,"crypto_sign_ed25519_open","","",null,null],[5,"crypto_sign_ed25519_detached","","",null,null],[5,"crypto_sign_ed25519_verify_detached","","",null,null],[5,"crypto_sign_ed25519_bytes","","",null,null],[5,"crypto_sign_ed25519_seedbytes","","",null,null],[5,"crypto_sign_ed25519_publickeybytes","","",null,null],[5,"crypto_sign_ed25519_secretkeybytes","","",null,null],[5,"crypto_stream_keybytes","","",null,null],[5,"crypto_stream_noncebytes","","",null,null],[5,"crypto_stream_primitive","","",null,null],[5,"crypto_stream_aes128ctr","","",null,null],[5,"crypto_stream_aes128ctr_xor","","",null,null],[5,"crypto_stream_aes128ctr_keybytes","","",null,null],[5,"crypto_stream_aes128ctr_noncebytes","","",null,null],[5,"crypto_stream_aes128ctr_beforenmbytes","","",null,null],[5,"crypto_stream_chacha20","","",null,null],[5,"crypto_stream_chacha20_xor","","",null,null],[5,"crypto_stream_chacha20_keybytes","","",null,null],[5,"crypto_stream_chacha20_noncebytes","","",null,null],[5,"crypto_stream_salsa20","","",null,null],[5,"crypto_stream_salsa20_xor","","",null,null],[5,"crypto_stream_salsa20_keybytes","","",null,null],[5,"crypto_stream_salsa20_noncebytes","","",null,null],[5,"crypto_stream_salsa2012","","",null,null],[5,"crypto_stream_salsa2012_xor","","",null,null],[5,"crypto_stream_salsa2012_keybytes","","",null,null],[5,"crypto_stream_salsa2012_noncebytes","","",null,null],[5,"crypto_stream_salsa208","","",null,null],[5,"crypto_stream_salsa208_xor","","",null,null],[5,"crypto_stream_salsa208_keybytes","","",null,null],[5,"crypto_stream_salsa208_noncebytes","","",null,null],[5,"crypto_stream_xsalsa20","","",null,null],[5,"crypto_stream_xsalsa20_xor","","",null,null],[5,"crypto_stream_xsalsa20_keybytes","","",null,null],[5,"crypto_stream_xsalsa20_noncebytes","","",null,null],[5,"crypto_verify_16_bytes","","",null,null],[5,"crypto_verify_16","","",null,null],[5,"crypto_verify_32_bytes","","",null,null],[5,"crypto_verify_32","","",null,null],[5,"crypto_verify_64_bytes","","",null,null],[5,"crypto_verify_64","","",null,null],[5,"randombytes_buf","","",null,null],[5,"sodium_memzero","","",null,null],[5,"sodium_memcmp","","",null,null],[5,"sodium_increment","","",null,null],[5,"sodium_mlock","","",null,null],[5,"sodium_munlock","","",null,null],[5,"sodium_malloc","","",null,null],[5,"sodium_allocarray","","",null,null],[5,"sodium_free","","",null,null],[5,"sodium_mprotect_noaccess","","",null,null],[5,"sodium_mprotect_readonly","","",null,null],[5,"sodium_mprotect_readwrite","","",null,null],[5,"sodium_version_string","","",null,null],[5,"sodium_library_version_major","","",null,null],[5,"sodium_library_version_minor","","",null,null],[6,"crypto_auth_hmacsha512256_state","","",null,null],[17,"crypto_aead_chacha20poly1305_KEYBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_NSECBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_NPUBBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_ABYTES","","",null,null],[17,"crypto_auth_BYTES","","",null,null],[17,"crypto_auth_KEYBYTES","","",null,null],[17,"crypto_auth_PRIMITIVE","","",null,null],[17,"crypto_auth_hmacsha256_BYTES","","",null,null],[17,"crypto_auth_hmacsha256_KEYBYTES","","",null,null],[17,"crypto_auth_hmacsha512_BYTES","","",null,null],[17,"crypto_auth_hmacsha512_KEYBYTES","","",null,null],[17,"crypto_auth_hmacsha512256_BYTES","","",null,null],[17,"crypto_auth_hmacsha512256_KEYBYTES","","",null,null],[17,"crypto_box_SEEDBYTES","","",null,null],[17,"crypto_box_PUBLICKEYBYTES","","",null,null],[17,"crypto_box_SECRETKEYBYTES","","",null,null],[17,"crypto_box_BEFORENMBYTES","","",null,null],[17,"crypto_box_NONCEBYTES","","",null,null],[17,"crypto_box_ZEROBYTES","","",null,null],[17,"crypto_box_BOXZEROBYTES","","",null,null],[17,"crypto_box_MACBYTES","","",null,null],[17,"crypto_box_PRIMITIVE","","",null,null],[17,"crypto_box_SEALBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_SEEDBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_NONCEBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_ZEROBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_MACBYTES","","",null,null],[17,"crypto_core_hsalsa20_OUTPUTBYTES","","",null,null],[17,"crypto_core_hsalsa20_INPUTBYTES","","",null,null],[17,"crypto_core_hsalsa20_KEYBYTES","","",null,null],[17,"crypto_core_hsalsa20_CONSTBYTES","","",null,null],[17,"crypto_core_salsa20_OUTPUTBYTES","","",null,null],[17,"crypto_core_salsa20_INPUTBYTES","","",null,null],[17,"crypto_core_salsa20_KEYBYTES","","",null,null],[17,"crypto_core_salsa20_CONSTBYTES","","",null,null],[17,"crypto_core_salsa2012_OUTPUTBYTES","","",null,null],[17,"crypto_core_salsa2012_INPUTBYTES","","",null,null],[17,"crypto_core_salsa2012_KEYBYTES","","",null,null],[17,"crypto_core_salsa2012_CONSTBYTES","","",null,null],[17,"crypto_core_salsa208_OUTPUTBYTES","","",null,null],[17,"crypto_core_salsa208_INPUTBYTES","","",null,null],[17,"crypto_core_salsa208_KEYBYTES","","",null,null],[17,"crypto_core_salsa208_CONSTBYTES","","",null,null],[17,"crypto_generichash_BYTES_MIN","","",null,null],[17,"crypto_generichash_BYTES_MAX","","",null,null],[17,"crypto_generichash_BYTES","","",null,null],[17,"crypto_generichash_KEYBYTES_MIN","","",null,null],[17,"crypto_generichash_KEYBYTES_MAX","","",null,null],[17,"crypto_generichash_KEYBYTES","","",null,null],[17,"crypto_generichash_PRIMITIVE","","",null,null],[17,"crypto_generichash_blake2b_BYTES_MIN","","",null,null],[17,"crypto_generichash_blake2b_BYTES_MAX","","",null,null],[17,"crypto_generichash_blake2b_BYTES","","",null,null],[17,"crypto_generichash_blake2b_KEYBYTES_MIN","","",null,null],[17,"crypto_generichash_blake2b_KEYBYTES_MAX","","",null,null],[17,"crypto_generichash_blake2b_KEYBYTES","","",null,null],[17,"crypto_generichash_blake2b_SALTBYTES","","",null,null],[17,"crypto_generichash_blake2b_PERSONALBYTES","","",null,null],[17,"crypto_hash_BYTES","","",null,null],[17,"crypto_hash_PRIMITIVE","","",null,null],[17,"crypto_hash_sha256_BYTES","","",null,null],[17,"crypto_hash_sha512_BYTES","","",null,null],[17,"crypto_onetimeauth_BYTES","","",null,null],[17,"crypto_onetimeauth_KEYBYTES","","",null,null],[17,"crypto_onetimeauth_PRIMITIVE","","",null,null],[17,"crypto_onetimeauth_poly1305_BYTES","","",null,null],[17,"crypto_onetimeauth_poly1305_KEYBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_SALTBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_STRBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_STRPREFIX","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE","","",null,null],[17,"crypto_scalarmult_BYTES","","",null,null],[17,"crypto_scalarmult_SCALARBYTES","","",null,null],[17,"crypto_scalarmult_PRIMITIVE","","",null,null],[17,"crypto_scalarmult_curve25519_BYTES","","",null,null],[17,"crypto_scalarmult_curve25519_SCALARBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_KEYBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_NONCEBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_ZEROBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_MACBYTES","","",null,null],[17,"crypto_shorthash_siphash24_BYTES","","",null,null],[17,"crypto_shorthash_siphash24_KEYBYTES","","",null,null],[17,"crypto_sign_ed25519_BYTES","","",null,null],[17,"crypto_sign_ed25519_SEEDBYTES","","",null,null],[17,"crypto_sign_ed25519_PUBLICKEYBYTES","","",null,null],[17,"crypto_sign_ed25519_SECRETKEYBYTES","","",null,null],[17,"crypto_stream_KEYBYTES","","",null,null],[17,"crypto_stream_NONCEBYTES","","",null,null],[17,"crypto_stream_PRIMITIVE","","",null,null],[17,"crypto_stream_aes128ctr_KEYBYTES","","",null,null],[17,"crypto_stream_aes128ctr_NONCEBYTES","","",null,null],[17,"crypto_stream_aes128ctr_BEFORENMBYTES","","",null,null],[17,"crypto_stream_chacha20_KEYBYTES","","",null,null],[17,"crypto_stream_chacha20_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa20_KEYBYTES","","",null,null],[17,"crypto_stream_salsa20_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa2012_KEYBYTES","","",null,null],[17,"crypto_stream_salsa2012_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa208_KEYBYTES","","",null,null],[17,"crypto_stream_salsa208_NONCEBYTES","","",null,null],[17,"crypto_stream_xsalsa20_KEYBYTES","","",null,null],[17,"crypto_stream_xsalsa20_NONCEBYTES","","",null,null],[17,"crypto_verify_16_BYTES","","",null,null],[17,"crypto_verify_32_BYTES","","",null,null],[17,"crypto_verify_64_BYTES","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"crypto_auth_hmacsha256_state"}],"output":{"name":"crypto_auth_hmacsha256_state"}}],[11,"clone","","",1,{"inputs":[{"name":"crypto_auth_hmacsha512_state"}],"output":{"name":"crypto_auth_hmacsha512_state"}}],[11,"clone","","",2,{"inputs":[{"name":"crypto_hash_sha256_state"}],"output":{"name":"crypto_hash_sha256_state"}}],[11,"clone","","",3,{"inputs":[{"name":"crypto_hash_sha512_state"}],"output":{"name":"crypto_hash_sha512_state"}}]],"paths":[[3,"crypto_auth_hmacsha256_state"],[3,"crypto_auth_hmacsha512_state"],[3,"crypto_hash_sha256_state"],[3,"crypto_hash_sha512_state"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",48,null],[12,"loads","","",48,null],[12,"totalram","","",48,null],[12,"freeram","","",48,null],[12,"sharedram","","",48,null],[12,"bufferram","","",48,null],[12,"totalswap","","",48,null],[12,"freeswap","","",48,null],[12,"procs","","",48,null],[12,"pad","","",48,null],[12,"totalhigh","","",48,null],[12,"freehigh","","",48,null],[12,"mem_unit","","",48,null],[12,"_f","","",48,null],[3,"stat","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"stat64","","",null,null],[12,"st_dev","","",50,null],[12,"st_ino","","",50,null],[12,"st_nlink","","",50,null],[12,"st_mode","","",50,null],[12,"st_uid","","",50,null],[12,"st_gid","","",50,null],[12,"st_rdev","","",50,null],[12,"st_size","","",50,null],[12,"st_blksize","","",50,null],[12,"st_blocks","","",50,null],[12,"st_atime","","",50,null],[12,"st_atime_nsec","","",50,null],[12,"st_mtime","","",50,null],[12,"st_mtime_nsec","","",50,null],[12,"st_ctime","","",50,null],[12,"st_ctime_nsec","","",50,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",51,null],[12,"exponent","","",51,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",52,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",53,null],[12,"swd","","",53,null],[12,"ftw","","",53,null],[12,"fop","","",53,null],[12,"rip","","",53,null],[12,"rdp","","",53,null],[12,"mxcsr","","",53,null],[12,"mxcr_mask","","",53,null],[12,"_st","","",53,null],[12,"_xmm","","",53,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",54,null],[12,"fpregs","","",54,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",55,null],[12,"uc_link","","",55,null],[12,"uc_stack","","",55,null],[12,"uc_mcontext","","",55,null],[12,"uc_sigmask","","",55,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"mkfifoat","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",56,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",56,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",56,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",56,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",56,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",56,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",56,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",56,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",56,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",56,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",56,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",56,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",56,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",56,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",57,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",57,null],[11,"clone","libc","",49,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",50,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",58,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",51,{"inputs":[{"name":"_libc_fpxreg"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",52,{"inputs":[{"name":"_libc_xmmreg"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",53,{"inputs":[{"name":"_libc_fpstate"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",54,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",55,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",59,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",48,{"inputs":[{"name":"sysinfo"}],"output":{"name":"sysinfo"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",60,{"inputs":[{"name":"sem_t"}],"output":{"name":"sem_t"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",61,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",62,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",63,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",64,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",65,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",66,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",67,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Option"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
initSearch(searchIndex);
